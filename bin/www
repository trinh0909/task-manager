#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('task-manager:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

/**
 * Create server socket.
 */
var server = http.createServer(app);

var io = require("socket.io")(server);
app.get('/', function(req, res){
  res.sendFile(__dirname + '/chat.ejs');
});

io.on("connection", function(socket){
  console.log("Có người kết nối :" + socket.id);

  socket.on("disconnect", function(){
    console.log(socket.id + " đã ngắt kết nối!!!");
  });

  // socket.on("Client-send-mau", function(data){
  //   console.log(socket.id + "vua gui len server: " + data);
    // io.sockets.emit("Server-send-data", data );
    // socket.emit("Server-send-data", data+"888");
    // socket.broadcast.emit("Server-send-data", data+"888");    
  // });

// Khởi tạo mảng lưu trữ danh sách người dùng
  var onlineUsers = [];

  socket.on("newuser", function(username){
    onlineUsers.push(username); // Thêm người dùng mới vào mảng
    socket.broadcast.emit("update", username + " đã tham gia vào đoàn chat!");
    io.sockets.emit("client-listuser", onlineUsers); // Gửi danh sách người dùng tới tất cả client
  });
  socket.on("exituser", function(username){
      socket.broadcast.emit("update", username + " rời đoạn chat!");
  });
  socket.on("chat", function(message){
      socket.broadcast.emit("chat", message);
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
